import { createContext, useContext, useState, ReactNode } from 'react';

interface Country {
  code: string;
  name: string;
  flag: string;
}

const SUPPORTED_COUNTRIES: Country[] = [
  { code: 'us', name: 'United States', flag: 'ðŸ‡ºðŸ‡¸' },
  { code: 'gb', name: 'United Kingdom', flag: 'ðŸ‡¬ðŸ‡§' },
  { code: 'au', name: 'Australia', flag: 'ðŸ‡¦ðŸ‡º' },
  { code: 'ca', name: 'Canada', flag: 'ðŸ‡¨ðŸ‡¦' },
  { code: 'br', name: 'Brazil', flag: 'ðŸ‡§ðŸ‡·' },
  { code: 'cn', name: 'China', flag: 'ðŸ‡¨ðŸ‡³' },
  { code: 'eg', name: 'Egypt', flag: 'ðŸ‡ªðŸ‡¬' },
  { code: 'fr', name: 'France', flag: 'ðŸ‡«ðŸ‡·' },
  { code: 'de', name: 'Germany', flag: 'ðŸ‡©ðŸ‡ª' },
  { code: 'gr', name: 'Greece', flag: 'ðŸ‡¬ðŸ‡·' },
  { code: 'hk', name: 'Hong Kong', flag: 'ðŸ‡­ðŸ‡°' },
  { code: 'in', name: 'India', flag: 'ðŸ‡®ðŸ‡³' },
  { code: 'ie', name: 'Ireland', flag: 'ðŸ‡®ðŸ‡ª' },
  { code: 'it', name: 'Italy', flag: 'ðŸ‡®ðŸ‡¹' },
  { code: 'jp', name: 'Japan', flag: 'ðŸ‡¯ðŸ‡µ' },
  { code: 'nl', name: 'Netherlands', flag: 'ðŸ‡³ðŸ‡±' },
  { code: 'no', name: 'Norway', flag: 'ðŸ‡³ðŸ‡´' },
  { code: 'pk', name: 'Pakistan', flag: 'ðŸ‡µðŸ‡°' },
  { code: 'pe', name: 'Peru', flag: 'ðŸ‡µðŸ‡ª' },
  { code: 'ph', name: 'Philippines', flag: 'ðŸ‡µðŸ‡­' },
  { code: 'pt', name: 'Portugal', flag: 'ðŸ‡µðŸ‡¹' },
  { code: 'ro', name: 'Romania', flag: 'ðŸ‡·ðŸ‡´' },
  { code: 'ru', name: 'Russian Federation', flag: 'ðŸ‡·ðŸ‡º' },
  { code: 'sg', name: 'Singapore', flag: 'ðŸ‡¸ðŸ‡¬' },
  { code: 'es', name: 'Spain', flag: 'ðŸ‡ªðŸ‡¸' },
  { code: 'se', name: 'Sweden', flag: 'ðŸ‡¸ðŸ‡ª' },
  { code: 'ch', name: 'Switzerland', flag: 'ðŸ‡¨ðŸ‡­' },
  { code: 'tw', name: 'Taiwan', flag: 'ðŸ‡¹ðŸ‡¼' },
  { code: 'ua', name: 'Ukraine', flag: 'ðŸ‡ºðŸ‡¦' },
];

interface CountryContextType {
  currentCountry: Country;
  setCountry: (country: Country) => void;
  supportedCountries: Country[];
}

const CountryContext = createContext<CountryContextType | undefined>(undefined);

export const useCountry = () => {
  const context = useContext(CountryContext);
  if (!context) {
    throw new Error('useCountry must be used within a CountryProvider');
  }
  return context;
};

interface CountryProviderProps {
  children: ReactNode;
}

export const CountryProvider = ({ children }: CountryProviderProps) => {
  const [currentCountry, setCurrentCountry] = useState<Country>(() => {
    // Load saved country preference on mount
    const savedCountry = localStorage.getItem('preferred-country');
    if (savedCountry) {
      const country = SUPPORTED_COUNTRIES.find(c => c.code === savedCountry);
      if (country) {
        return country;
      }
    }
    return SUPPORTED_COUNTRIES[0]; // Default to United States
  });

  const setCountry = (country: Country) => {
    setCurrentCountry(country);
    localStorage.setItem('preferred-country', country.code);
  };

  return (
    <CountryContext.Provider
      value={{
        currentCountry,
        setCountry,
        supportedCountries: SUPPORTED_COUNTRIES,
      }}
    >
      {children}
    </CountryContext.Provider>
  );
};